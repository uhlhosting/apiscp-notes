{"componentChunkName":"component---node-modules-gatsby-theme-code-notes-src-templates-note-js","path":"/resource-hogs/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Locating resource hogs\",\n  \"tags\": [\"cgroups\", \"resources\"],\n  \"emoji\": \"üê∑\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"cpumemory\"\n  }, \"CPU/memory\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"systemd-cgtop\"), \" provides a top-like interface for all control groups. Processes spawned within the context of a site are governed by resource limits assigned in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cgroup\"), \" service class.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Hotkey\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Sort field\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"m\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Memory\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"c\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"CPU\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"t\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Tasks (PID count)\")))), mdx(\"h2\", {\n    \"id\": \"per-process\"\n  }, \"Per process\"), mdx(\"p\", null, \"Run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"top\"), \". Behaves similarly to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"systemd-cgtop\"), \".\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Hotkey\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Sort field\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"shift + M\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Memory\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"shift + P\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"CPU\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"shift + T\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Cumulative time\")))), mdx(\"h2\", {\n    \"id\": \"bandwidth\"\n  }, \"Bandwidth\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"admin:get-usage('bandwidth')\"), \" returns bandwidth for all sites in their respective usage periods. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jq\"), \" can be used to sort output.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"# Sort bandwidth by sum of in + out\\ncpcmd -o json admin:get-usage bandwidth | jq 'to_entries | sort_by(.value.sum)'\\n\")), mdx(\"h2\", {\n    \"id\": \"storage\"\n  }, \"Storage\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"repquota -g $(findmnt -no SOURCE --target /home/virtual) | sort -n --key=3\"), \" \"), mdx(\"p\", null, \"If on a single mount, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$(...)\"), \" can be replaced with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/\"), \" or to report quotas for all mounts, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-a\"), \".\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"admin:get-usage('storage')\"), \" works similarly as the bandwidth example above.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"# Sort bandwidth by sum of in + out\\ncpcmd -o json admin:get-usage storage | jq 'to_entries | sort_by(.value.qused)'\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"qused\"), \" is storage blocks used in 4 KB units. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fused\"), \" is inode usage.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Locating resource hogs","tags":["cgroups","resources"],"emoji":"üê∑","link":null},"fields":{"dateModified":"7th Feb 2022","slug":"/resource-hogs/"},"tableOfContents":{"items":[{"url":"#cpumemory","title":"CPU/memory"},{"url":"#per-process","title":"Per process"},{"url":"#bandwidth","title":"Bandwidth"},{"url":"#storage","title":"Storage"}]},"parent":{"__typename":"File","relativePath":"resource-hogs.md"}}},"pageContext":{"id":"f92a1674-258e-5852-843a-5c644414912f","previous":{"id":"ce854969-120f-54de-a04c-8ccba90b3a7a","frontmatter":{"title":"Run Bootstrapper Playbook","tags":["ansible","playbook","bootstrapper"]},"fields":{"slug":"/run-playbook/"}},"next":{"id":"01e9c047-664c-5da7-a8a6-1cdcab1f2d81","frontmatter":{"title":"Force CP hostname redirect","tags":["frontend"]},"fields":{"slug":"/redirect-cp-hostname/"}},"hasUntagged":false,"basePath":"/"}},"staticQueryHashes":["1437003973","2744905544","3664657028","467212769","467212769"]}