{"componentChunkName":"component---node-modules-gatsby-theme-code-notes-src-templates-note-js","path":"/xdebug-usage/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Profiling with Xdebug\",\n  \"tags\": [\"php\", \"modules\", \"bootstrapper\"],\n  \"emoji\": \"üêõ\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Xdebug generates profiling data compatible with Cachegrind. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://kcachegrind.github.io/\"\n  }), \"KCacheGrind\"), \" (Linux, KDE), \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://sourceforge.net/projects/qcachegrindwin/\"\n  }), \"QCacheGrind\"), \" (Windows), or \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/jokkedk/webgrind\"\n  }), \"WebGrind\"), \". Change \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"force_module_rebuild\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" to overwrite xdebug.ini configuration, if present, in FST/siteinfo/etc/phpXX.d/. \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"cd /usr/local/apnscp/resources/playbooks\\n\\nansible-playbook bootstrap.yml  --tags=php/install-pecl-module,apnscp/php-filesystem-template --extra-vars=pecl_extensions='{\\\"name\\\":\\\"xdebug\\\",\\\"zend\\\":true,\\\"extension\\\":\\\"https://github.com/xdebug/xdebug/archive/2.9.6.tar.gz\\\"}' --extra-vars=force_module_rebuild=false\\n\")), mdx(\"p\", null, \"Add Xdebug profiling support to PHP. Depending upon \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.apiscp.com/admin/PHP-FPM/#override-precedence\"\n  }), \"configuration visibility\"), \", siteXX/fst/etc/phpXX.d/ or .user.ini are preferred.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ini\"\n  }), \"xdebug.profiler_enable_trigger=1\\nxdebug.profiler_enable_trigger_value=mykey\\n; May want to change this...\\nxdebug.profiler_output_dir=/tmp\\n\")), mdx(\"p\", null, \"Restart the pool (or all pools) using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"systemctl restart php-fpm\"), \". Users may restart via \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Web\"), \" > \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"PHP Pools\"), \".\"), mdx(\"p\", null, \"Visit site with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"?XDEBUG_PROFILE=mykey\"), \" at the end of the request URI to generate a profile at the end of the request.\"), mdx(\"p\", null, \"systemd prefers private /tmp directories, which locates the generated \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cachegrind.*\"), \"  files in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/tmp/systemd-private-HASH-php-fpm-siteXX.../tmp/\"), \". A web-accessible directory can be used instead. \"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PrivateTmp=no\"), \" may be added to the systemd service as an \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.apiscp.com/admin/PHP-FPM/#overriding-service-definitions\"\n  }), \"override\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"mkdir /var/www/html/profiler\\nchmod 777 /var/www/html/profiler\\n\")), mdx(\"p\", null, \"Adjust \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"xdebug.profiler_output_dir\"), \" accordingly.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Profiling with Xdebug","tags":["php","modules","bootstrapper"],"emoji":"üêõ","link":null},"fields":{"dateModified":"24th Mar 2022","slug":"/xdebug-usage/"},"tableOfContents":{},"parent":{"__typename":"File","relativePath":"xdebug-usage.md"}}},"pageContext":{"id":"6912762e-2b3e-5788-b25d-451044355810","previous":null,"next":{"id":"a77e2c68-661b-5f93-961f-16b26b83bd08","frontmatter":{"title":"Unblocking addresses","tags":["firewall","network"]},"fields":{"slug":"/unblock-addresses/"}},"hasUntagged":false,"basePath":"/"}},"staticQueryHashes":["1437003973","2744905544","3664657028","467212769","467212769"]}